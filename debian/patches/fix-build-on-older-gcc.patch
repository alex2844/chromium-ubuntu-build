Index: dev/media/gpu/vaapi/vaapi_mjpeg_decode_accelerator.cc
===================================================================
--- dev.orig/media/gpu/vaapi/vaapi_mjpeg_decode_accelerator.cc
+++ dev/media/gpu/vaapi/vaapi_mjpeg_decode_accelerator.cc
@@ -89,7 +89,7 @@ static bool VerifyDataSize(const VAImage
   const gfx::Size dimensions(base::strict_cast<int>(image->width),
                              base::strict_cast<int>(image->height));
   size_t min_size = 0;
-  if (image->format.fourcc == VA_FOURCC_I420) {
+  if (image->format.fourcc == VA_FOURCC('I', '4', '2', '0')) {
     min_size = VideoFrame::AllocationSize(PIXEL_FORMAT_I420, dimensions);
   } else if (image->format.fourcc == VA_FOURCC_NV12) {
     min_size = VideoFrame::AllocationSize(PIXEL_FORMAT_NV12, dimensions);
@@ -269,7 +269,7 @@ bool VaapiMjpegDecodeAccelerator::Output
   }
 
   switch (image->format.fourcc) {
-    case VA_FOURCC_I420:
+    case VA_FOURCC('I', '4', '2', '0'):
       DCHECK_EQ(image->num_planes, 3u);
       switch (video_frame->format()) {
         case PIXEL_FORMAT_I420:
Index: dev/media/gpu/vaapi/vaapi_video_encode_accelerator.h
===================================================================
--- dev.orig/media/gpu/vaapi/vaapi_video_encode_accelerator.h
+++ dev/media/gpu/vaapi/vaapi_video_encode_accelerator.h
@@ -51,7 +51,9 @@ class MEDIA_GPU_EXPORT VaapiVideoEncodeA
  private:
   class H264Accelerator;
   class VP8Accelerator;
+#if VA_CHECK_VERSION(0, 39, 2)
   class VP9Accelerator;
+#endif
 
   // Encoder state.
   enum State {
Index: dev/media/gpu/vaapi/vaapi_video_encode_accelerator.cc
===================================================================
--- dev.orig/media/gpu/vaapi/vaapi_video_encode_accelerator.cc
+++ dev/media/gpu/vaapi/vaapi_video_encode_accelerator.cc
@@ -222,6 +222,7 @@ class VaapiVideoEncodeAccelerator::VP8Ac
   VaapiVideoEncodeAccelerator* const vea_;
 };
 
+#if VA_CHECK_VERSION(0, 39, 2)
 class VaapiVideoEncodeAccelerator::VP9Accelerator
     : public VP9Encoder::Accelerator {
  public:
@@ -243,6 +244,7 @@ class VaapiVideoEncodeAccelerator::VP9Ac
  private:
   VaapiVideoEncodeAccelerator* const vea_;
 };
+#endif
 
 VaapiVideoEncodeAccelerator::VaapiVideoEncodeAccelerator()
     : output_buffer_byte_size_(0),
@@ -374,10 +376,12 @@ void VaapiVideoEncodeAccelerator::Initia
           std::make_unique<VP8Encoder>(std::make_unique<VP8Accelerator>(this));
       break;
 
+#if VA_CHECK_VERSION(0, 39, 2)
     case kCodecVP9:
       encoder_ =
           std::make_unique<VP9Encoder>(std::make_unique<VP9Accelerator>(this));
       break;
+#endif
 
     default:
       NOTREACHED() << "Unsupported codec type " << GetCodecName(codec);
@@ -1133,7 +1137,9 @@ bool VaapiVideoEncodeAccelerator::H264Ac
   rate_control_param.window_size = encode_params.cpb_window_size_ms;
   rate_control_param.initial_qp = pic_param.pic_init_qp;
   rate_control_param.min_qp = encode_params.scaling_settings.min_qp;
+#if VA_CHECK_VERSION(1, 1, 0)
   rate_control_param.max_qp = encode_params.scaling_settings.max_qp;
+#endif
   rate_control_param.rc_flags.bits.disable_frame_skip = true;
 
   VAEncMiscParameterFrameRate framerate_param = {};
@@ -1345,7 +1351,9 @@ bool VaapiVideoEncodeAccelerator::VP8Acc
   rate_control_param.window_size = encode_params.cpb_window_size_ms;
   rate_control_param.initial_qp = encode_params.initial_qp;
   rate_control_param.min_qp = encode_params.scaling_settings.min_qp;
+#if VA_CHECK_VERSION(1, 1, 0)
   rate_control_param.max_qp = encode_params.scaling_settings.max_qp;
+#endif
   rate_control_param.rc_flags.bits.disable_frame_skip = true;
 
   VAEncMiscParameterFrameRate framerate_param = {};
@@ -1388,6 +1396,7 @@ bool VaapiVideoEncodeAccelerator::VP8Acc
   return true;
 }
 
+#if VA_CHECK_VERSION(0, 39, 2)
 scoped_refptr<VP9Picture>
 VaapiVideoEncodeAccelerator::VP9Accelerator::GetPicture(
     AcceleratedVideoEncoder::EncodeJob* job) {
@@ -1520,5 +1529,6 @@ bool VaapiVideoEncodeAccelerator::VP9Acc
 
   return true;
 }
+#endif
 
 }  // namespace media
Index: dev/media/gpu/vaapi/vaapi_wrapper.cc
===================================================================
--- dev.orig/media/gpu/vaapi/vaapi_wrapper.cc
+++ dev/media/gpu/vaapi/vaapi_wrapper.cc
@@ -1164,10 +1164,10 @@ bool VASupportedImageFormats::InitSuppor
     // Remove this workaround once b/128340287 is resolved.
     if (std::find_if(supported_formats_.cbegin(), supported_formats_.cend(),
                      [](const VAImageFormat& format) {
-                       return format.fourcc == VA_FOURCC_I420;
+                       return format.fourcc == VA_FOURCC('I', '4', '2', '0');
                      }) == supported_formats_.cend()) {
       VAImageFormat i420_format{};
-      i420_format.fourcc = VA_FOURCC_I420;
+      i420_format.fourcc = VA_FOURCC('I', '4', '2', '0');
       supported_formats_.push_back(i420_format);
     }
   }
@@ -1343,7 +1343,7 @@ bool VaapiWrapper::GetJpegDecodeSuitable
     // The VAAPI mesa state tracker only supports conversion from NV12 to YV12
     // and IYUV (synonym of I420).
     if (rt_format == VA_RT_FORMAT_YUV420) {
-      if (preferred_fourcc != VA_FOURCC_I420 &&
+      if (preferred_fourcc != VA_FOURCC('I', '4', '2', '0') &&
           preferred_fourcc != VA_FOURCC_YV12) {
         preferred_fourcc = VA_FOURCC_NV12;
       }
@@ -1373,13 +1373,13 @@ bool VaapiWrapper::GetJpegDecodeSuitable
     //
     if (preferred_fourcc == VA_FOURCC_422H ||
         preferred_fourcc == VA_FOURCC_P010) {
-      preferred_fourcc = VA_FOURCC_I420;
+      preferred_fourcc = VA_FOURCC('I', '4', '2', '0');
     }
   }
 
   if (!VASupportedImageFormats::Get().IsImageFormatSupported(
           VAImageFormat{.fourcc = preferred_fourcc})) {
-    preferred_fourcc = VA_FOURCC_I420;
+    preferred_fourcc = VA_FOURCC('I', '4', '2', '0');
   }
 
   // After workarounds, assume the conversion is supported.
@@ -1596,7 +1596,11 @@ scoped_refptr<VASurface> VaapiWrapper::C
   }
   // We only have to pass the first file descriptor to a driver. A VA-API driver
   // shall create a VASurface from the single fd correctly.
+#if VA_CHECK_VERSION(1, 0, 0)
   uintptr_t fd = base::checked_cast<uintptr_t>(pixmap->GetDmaBufFd(0));
+#else
+  unsigned long fd = base::checked_cast<unsigned long>(pixmap->GetDmaBufFd(0));
+#endif
   va_attrib_extbuf.buffers = &fd;
   va_attrib_extbuf.num_buffers = 1u;
 
@@ -1646,6 +1650,7 @@ VaapiWrapper::ExportVASurfaceAsNativePix
     return nullptr;
   }
 
+#if VA_CHECK_VERSION(1, 0, 0)
   VADRMPRIMESurfaceDescriptor descriptor;
   {
     base::AutoLock auto_lock(*va_lock_);
@@ -1738,6 +1743,10 @@ VaapiWrapper::ExportVASurfaceAsNativePix
   exported_pixmap->pixmap = base::MakeRefCounted<gfx::NativePixmapDmaBuf>(
       scoped_va_surface.size(), buffer_format, std::move(handle));
   return exported_pixmap;
+#else
+  LOG(ERROR) << "Exporting a surface with FOURCC has been disabled";
+  return nullptr;
+#endif
 }
 
 bool VaapiWrapper::SyncSurface(VASurfaceID va_surface_id) {
@@ -2217,11 +2226,13 @@ bool VaapiWrapper::Initialize(CodecMode
 
   VAEntrypoint entrypoint = GetDefaultVaEntryPoint(mode, va_profile);
 
+#if VA_CHECK_VERSION(0, 39, 1)
   if (mode == CodecMode::kEncode && IsLowPowerEncSupported(va_profile) &&
       base::FeatureList::IsEnabled(kVaapiLowPowerEncoder)) {
     entrypoint = VAEntrypointEncSliceLP;
     DVLOG(2) << "Enable VA-API Low-Power Encode Entrypoint";
   }
+#endif
 
   base::AutoLock auto_lock(*va_lock_);
   std::vector<VAConfigAttrib> required_attribs;
@@ -2451,6 +2462,7 @@ void VaapiWrapper::TryToSetVADisplayAttr
     DVLOG(2) << "vaSetDisplayAttributes unsupported, ignoring by default.";
 }
 
+#if VA_CHECK_VERSION(0, 39, 1)
 // Check the support for low-power encode
 bool VaapiWrapper::IsLowPowerEncSupported(VAProfile va_profile) const {
   // Enabled only for H264/AVC & VP9 Encoders
@@ -2486,5 +2498,6 @@ bool VaapiWrapper::IsLowPowerEncSupporte
   }
   return true;
 }
+#endif
 
 }  // namespace media
Index: dev/media/gpu/vaapi/vaapi_wrapper.h
===================================================================
--- dev.orig/media/gpu/vaapi/vaapi_wrapper.h
+++ dev/media/gpu/vaapi/vaapi_wrapper.h
@@ -427,8 +427,10 @@ class MEDIA_GPU_EXPORT VaapiWrapper
   // Attempt to set render mode to "render to texture.". Failure is non-fatal.
   void TryToSetVADisplayAttributeToLocalGPU();
 
+#if VA_CHECK_VERSION(0, 39, 1)
   // Check low-power encode support for the given profile
   bool IsLowPowerEncSupported(VAProfile va_profile) const;
+#endif
 
   const CodecMode mode_;
 
Index: dev/media/gpu/chromeos/fourcc.cc
===================================================================
--- dev.orig/media/gpu/chromeos/fourcc.cc
+++ dev/media/gpu/chromeos/fourcc.cc
@@ -210,11 +210,11 @@ uint32_t Fourcc::ToV4L2PixFmt() const {
 // static
 base::Optional<Fourcc> Fourcc::FromVAFourCC(uint32_t va_fourcc) {
   switch (va_fourcc) {
-    case VA_FOURCC_I420:
+    case VA_FOURCC('I', '4', '2', '0'):
       return Fourcc(YU12);
     case VA_FOURCC_NV12:
       return Fourcc(NV12);
-    case VA_FOURCC_NV21:
+    case VA_FOURCC('N', 'V', '2', '1'):
       return Fourcc(NV21);
     case VA_FOURCC_YV12:
       return Fourcc(YV12);
@@ -238,11 +238,11 @@ base::Optional<Fourcc> Fourcc::FromVAFou
 base::Optional<uint32_t> Fourcc::ToVAFourCC() const {
   switch (value_) {
     case YU12:
-      return VA_FOURCC_I420;
+      return VA_FOURCC('I', '4', '2', '0');
     case NV12:
       return VA_FOURCC_NV12;
     case NV21:
-      return VA_FOURCC_NV21;
+      return VA_FOURCC('N', 'V', '2', '1');
     case YV12:
       return VA_FOURCC_YV12;
     case YUYV:
