Index: dev/media/gpu/vaapi/vaapi_mjpeg_decode_accelerator.cc
===================================================================
--- dev.orig/media/gpu/vaapi/vaapi_mjpeg_decode_accelerator.cc
+++ dev/media/gpu/vaapi/vaapi_mjpeg_decode_accelerator.cc
@@ -89,7 +89,7 @@ static bool VerifyDataSize(const VAImage
   const gfx::Size dimensions(base::strict_cast<int>(image->width),
                              base::strict_cast<int>(image->height));
   size_t min_size = 0;
-  if (image->format.fourcc == VA_FOURCC_I420) {
+  if (image->format.fourcc == VA_FOURCC('I', '4', '2', '0')) {
     min_size = VideoFrame::AllocationSize(PIXEL_FORMAT_I420, dimensions);
   } else if (image->format.fourcc == VA_FOURCC_NV12) {
     min_size = VideoFrame::AllocationSize(PIXEL_FORMAT_NV12, dimensions);
@@ -269,7 +269,7 @@ bool VaapiMjpegDecodeAccelerator::Output
   }
 
   switch (image->format.fourcc) {
-    case VA_FOURCC_I420:
+    case VA_FOURCC('I', '4', '2', '0'):
       DCHECK_EQ(image->num_planes, 3u);
       switch (video_frame->format()) {
         case PIXEL_FORMAT_I420:
Index: dev/media/gpu/vaapi/vaapi_video_encode_accelerator.h
===================================================================
--- dev.orig/media/gpu/vaapi/vaapi_video_encode_accelerator.h
+++ dev/media/gpu/vaapi/vaapi_video_encode_accelerator.h
@@ -52,7 +52,9 @@ class MEDIA_GPU_EXPORT VaapiVideoEncodeA
   friend class VaapiVideoEncodeAcceleratorTest;
   class H264Accelerator;
   class VP8Accelerator;
+#if VA_CHECK_VERSION(0, 39, 2)
   class VP9Accelerator;
+#endif
 
   // Encoder state.
   enum State {
Index: dev/media/gpu/vaapi/vaapi_video_encode_accelerator.cc
===================================================================
--- dev.orig/media/gpu/vaapi/vaapi_video_encode_accelerator.cc
+++ dev/media/gpu/vaapi/vaapi_video_encode_accelerator.cc
@@ -224,6 +224,7 @@ class VaapiVideoEncodeAccelerator::VP8Ac
   VaapiVideoEncodeAccelerator* const vea_;
 };
 
+#if VA_CHECK_VERSION(0, 39, 2)
 class VaapiVideoEncodeAccelerator::VP9Accelerator
     : public VP9Encoder::Accelerator {
  public:
@@ -245,6 +246,7 @@ class VaapiVideoEncodeAccelerator::VP9Ac
  private:
   VaapiVideoEncodeAccelerator* const vea_;
 };
+#endif
 
 VaapiVideoEncodeAccelerator::VaapiVideoEncodeAccelerator()
     : output_buffer_byte_size_(0),
@@ -385,6 +387,7 @@ void VaapiVideoEncodeAccelerator::Initia
         DCHECK_EQ(ave_config.bitrate_control,
                   AcceleratedVideoEncoder::BitrateControl::kConstantBitrate);
         break;
+#if VA_CHECK_VERSION(0, 39, 2)
       case kCodecVP9:
         encoder_ = std::make_unique<VP9Encoder>(
             std::make_unique<VP9Accelerator>(this));
@@ -392,6 +395,7 @@ void VaapiVideoEncodeAccelerator::Initia
         DCHECK_EQ(ave_config.bitrate_control,
                   AcceleratedVideoEncoder::BitrateControl::kConstantBitrate);
         break;
+#endif
       default:
         NOTREACHED() << "Unsupported codec type " << GetCodecName(codec);
         return;
@@ -1152,7 +1156,9 @@ bool VaapiVideoEncodeAccelerator::H264Ac
   rate_control_param.window_size = encode_params.cpb_window_size_ms;
   rate_control_param.initial_qp = pic_param.pic_init_qp;
   rate_control_param.min_qp = encode_params.scaling_settings.min_qp;
+#if VA_CHECK_VERSION(1, 1, 0)
   rate_control_param.max_qp = encode_params.scaling_settings.max_qp;
+#endif
   rate_control_param.rc_flags.bits.disable_frame_skip = true;
 
   VAEncMiscParameterFrameRate framerate_param = {};
@@ -1364,7 +1370,9 @@ bool VaapiVideoEncodeAccelerator::VP8Acc
   rate_control_param.window_size = encode_params.cpb_window_size_ms;
   rate_control_param.initial_qp = encode_params.initial_qp;
   rate_control_param.min_qp = encode_params.scaling_settings.min_qp;
+#if VA_CHECK_VERSION(1, 1, 0)
   rate_control_param.max_qp = encode_params.scaling_settings.max_qp;
+#endif
   rate_control_param.rc_flags.bits.disable_frame_skip = true;
 
   VAEncMiscParameterFrameRate framerate_param = {};
@@ -1407,6 +1415,7 @@ bool VaapiVideoEncodeAccelerator::VP8Acc
   return true;
 }
 
+#if VA_CHECK_VERSION(0, 39, 2)
 scoped_refptr<VP9Picture>
 VaapiVideoEncodeAccelerator::VP9Accelerator::GetPicture(
     AcceleratedVideoEncoder::EncodeJob* job) {
@@ -1539,5 +1548,6 @@ bool VaapiVideoEncodeAccelerator::VP9Acc
 
   return true;
 }
+#endif
 
 }  // namespace media
Index: dev/media/gpu/vaapi/vaapi_wrapper.cc
===================================================================
--- dev.orig/media/gpu/vaapi/vaapi_wrapper.cc
+++ dev/media/gpu/vaapi/vaapi_wrapper.cc
@@ -10,8 +10,10 @@
 #include <va/va.h>
 #include <va/va_drm.h>
 #include <va/va_drmcommon.h>
-#include <va/va_str.h>
 #include <va/va_version.h>
+#if VA_MAJOR_VERSION >= 2
+#include <va/va_str.h>
+#endif
 
 #include <algorithm>
 #include <string>
@@ -343,6 +345,62 @@ bool IsBlackListedDriver(const std::stri
   return false;
 }
 
+#if !VA_CHECK_VERSION(1, 0, 0)
+#define TOSTR(enumCase) case enumCase: return #enumCase
+
+const char *vaProfileStr(VAProfile profile)
+{
+  switch (profile) {
+    TOSTR(VAProfileNone);
+    TOSTR(VAProfileMPEG2Simple);
+    TOSTR(VAProfileMPEG2Main);
+    TOSTR(VAProfileMPEG4Simple);
+    TOSTR(VAProfileMPEG4AdvancedSimple);
+    TOSTR(VAProfileMPEG4Main);
+    TOSTR(VAProfileH264Baseline);
+    TOSTR(VAProfileH264Main);
+    TOSTR(VAProfileH264High);
+    TOSTR(VAProfileVC1Simple);
+    TOSTR(VAProfileVC1Main);
+    TOSTR(VAProfileVC1Advanced);
+    TOSTR(VAProfileH263Baseline);
+    TOSTR(VAProfileH264ConstrainedBaseline);
+    TOSTR(VAProfileJPEGBaseline);
+    TOSTR(VAProfileVP8Version0_3);
+    TOSTR(VAProfileH264MultiviewHigh);
+    TOSTR(VAProfileH264StereoHigh);
+    TOSTR(VAProfileHEVCMain);
+    TOSTR(VAProfileHEVCMain10);
+    TOSTR(VAProfileVP9Profile0);
+    TOSTR(VAProfileVP9Profile1);
+    TOSTR(VAProfileVP9Profile2);
+    TOSTR(VAProfileVP9Profile3);
+  }
+  return "<unknown profile>";
+}
+
+
+const char *vaEntrypointStr(VAEntrypoint entrypoint)
+{
+  switch (entrypoint) {
+    TOSTR(VAEntrypointVLD);
+    TOSTR(VAEntrypointIZZ);
+    TOSTR(VAEntrypointIDCT);
+    TOSTR(VAEntrypointMoComp);
+    TOSTR(VAEntrypointDeblocking);
+    TOSTR(VAEntrypointEncSlice);
+    TOSTR(VAEntrypointEncPicture);
+#if VA_CHECK_VERSION(0, 39, 1)
+    TOSTR(VAEntrypointEncSliceLP);
+#endif
+    TOSTR(VAEntrypointVideoProc);
+  }
+  return "<unknown entrypoint>";
+}
+
+#undef TOSTR
+#endif
+
 // This class is a wrapper around its |va_display_| (and its associated
 // |va_lock_|) to guarantee mutual exclusion and singleton behaviour.
 class VADisplayState {
@@ -569,10 +627,16 @@ std::vector<VAEntrypoint> GetEntryPoints
   std::vector<VAEntrypoint>
       whitelisted_entrypoints[VaapiWrapper::CodecMode::kCodecModeMax] = {
           {VAEntrypointVLD},  // For kDecode.
-          {VAEntrypointEncSlice, VAEntrypointEncPicture,
-           VAEntrypointEncSliceLP},  // For kEncode.
-          {VAEntrypointEncSlice,
-           VAEntrypointEncSliceLP},  // For
+          {VAEntrypointEncSlice, VAEntrypointEncPicture
+#if VA_CHECK_VERSION(0, 39, 1)
+           , VAEntrypointEncSliceLP
+#endif
+          },  // For kEncode.
+          {VAEntrypointEncSlice
+#if VA_CHECK_VERSION(0, 39, 1)
+           , VAEntrypointEncSliceLP
+#endif
+                                 },  // For
                                      // kEncodeConstantQuantizationParameter.
           {VAEntrypointVideoProc}    // For kVideoProcess.
       };
@@ -1169,16 +1233,17 @@ bool VASupportedImageFormats::InitSuppor
     // Remove this workaround once b/128340287 is resolved.
     if (std::find_if(supported_formats_.cbegin(), supported_formats_.cend(),
                      [](const VAImageFormat& format) {
-                       return format.fourcc == VA_FOURCC_I420;
+                       return format.fourcc == VA_FOURCC('I', '4', '2', '0');
                      }) == supported_formats_.cend()) {
       VAImageFormat i420_format{};
-      i420_format.fourcc = VA_FOURCC_I420;
+      i420_format.fourcc = VA_FOURCC('I', '4', '2', '0');
       supported_formats_.push_back(i420_format);
     }
   }
   return true;
 }
 
+#if VA_CHECK_VERSION(0, 39, 1)
 bool IsLowPowerEncSupported(VAProfile va_profile) {
   // Enabled only for H264/AVC & VP9 Encoders
   if (va_profile != VAProfileH264ConstrainedBaseline &&
@@ -1206,6 +1271,7 @@ bool IsLowPowerEncSupported(VAProfile va
 
   return false;
 }
+#endif
 
 }  // namespace
 
@@ -1376,7 +1442,7 @@ bool VaapiWrapper::GetJpegDecodeSuitable
     // The VAAPI mesa state tracker only supports conversion from NV12 to YV12
     // and IYUV (synonym of I420).
     if (rt_format == VA_RT_FORMAT_YUV420) {
-      if (preferred_fourcc != VA_FOURCC_I420 &&
+      if (preferred_fourcc != VA_FOURCC('I', '4', '2', '0') &&
           preferred_fourcc != VA_FOURCC_YV12) {
         preferred_fourcc = VA_FOURCC_NV12;
       }
@@ -1406,18 +1472,18 @@ bool VaapiWrapper::GetJpegDecodeSuitable
     //
     if (preferred_fourcc == VA_FOURCC_422H ||
         preferred_fourcc == VA_FOURCC_P010) {
-      preferred_fourcc = VA_FOURCC_I420;
+      preferred_fourcc = VA_FOURCC('I', '4', '2', '0');
     }
   } else if (GetImplementationType() == VAImplementation::kIntelIHD) {
     // TODO(b/155939640): iHD v19.4 fails to allocate AYUV surfaces for the VPP
     // on gen 9.5.
     if (preferred_fourcc == VA_FOURCC_AYUV)
-      preferred_fourcc = VA_FOURCC_I420;
+      preferred_fourcc = VA_FOURCC('I', '4', '2', '0');
   }
 
   if (!VASupportedImageFormats::Get().IsImageFormatSupported(
           VAImageFormat{.fourcc = preferred_fourcc})) {
-    preferred_fourcc = VA_FOURCC_I420;
+    preferred_fourcc = VA_FOURCC('I', '4', '2', '0');
   }
 
   // After workarounds, assume the conversion is supported.
@@ -1507,8 +1573,10 @@ VAEntrypoint VaapiWrapper::GetDefaultVaE
       if (profile == VAProfileJPEGBaseline)
         return VAEntrypointEncPicture;
       DCHECK(IsModeEncoding(mode));
+#if VA_CHECK_VERSION(0, 39, 1)
       if (IsLowPowerEncSupported(profile))
         return VAEntrypointEncSliceLP;
+#endif
       return VAEntrypointEncSlice;
     case VaapiWrapper::kVideoProcess:
       return VAEntrypointVideoProc;
@@ -1639,7 +1707,11 @@ scoped_refptr<VASurface> VaapiWrapper::C
   }
   // We only have to pass the first file descriptor to a driver. A VA-API driver
   // shall create a VASurface from the single fd correctly.
+#if VA_CHECK_VERSION(1, 0, 0)
   uintptr_t fd = base::checked_cast<uintptr_t>(pixmap->GetDmaBufFd(0));
+#else
+  unsigned long fd = base::checked_cast<unsigned long>(pixmap->GetDmaBufFd(0));
+#endif
   va_attrib_extbuf.buffers = &fd;
   va_attrib_extbuf.num_buffers = 1u;
 
@@ -1689,6 +1761,7 @@ VaapiWrapper::ExportVASurfaceAsNativePix
     return nullptr;
   }
 
+#if VA_CHECK_VERSION(1, 0, 0)
   VADRMPRIMESurfaceDescriptor descriptor;
   {
     base::AutoLock auto_lock(*va_lock_);
@@ -1781,6 +1854,10 @@ VaapiWrapper::ExportVASurfaceAsNativePix
   exported_pixmap->pixmap = base::MakeRefCounted<gfx::NativePixmapDmaBuf>(
       scoped_va_surface.size(), buffer_format, std::move(handle));
   return exported_pixmap;
+#else
+  LOG(ERROR) << "Exporting a surface with FOURCC has been disabled";
+  return nullptr;
+#endif
 }
 
 bool VaapiWrapper::SyncSurface(VASurfaceID va_surface_id) {
@@ -2135,6 +2212,7 @@ void VaapiWrapper::DestroyVABuffers() {
 }
 
 bool VaapiWrapper::IsRotationSupported() {
+#if VA_CHECK_VERSION(1, 1, 0)
   base::AutoLock auto_lock(*va_lock_);
   VAProcPipelineCaps pipeline_caps;
   memset(&pipeline_caps, 0, sizeof(pipeline_caps));
@@ -2149,6 +2227,10 @@ bool VaapiWrapper::IsRotationSupported()
     return false;
   }
   return true;
+#else
+  DVLOG(2) << "VA-API driver doesn't support any rotation";
+  return false;
+#endif
 }
 
 bool VaapiWrapper::BlitSurface(const VASurface& va_surface_src,
@@ -2204,6 +2286,7 @@ bool VaapiWrapper::BlitSurface(const VAS
     pipeline_param->output_color_standard = VAProcColorStandardNone;
     pipeline_param->filter_flags = VA_FILTER_SCALING_DEFAULT;
 
+#if VA_CHECK_VERSION(1, 1, 0)
     switch (rotation) {
       case VIDEO_ROTATION_0:
         pipeline_param->rotation_state = VA_ROTATION_NONE;
@@ -2218,6 +2301,7 @@ bool VaapiWrapper::BlitSurface(const VAS
         pipeline_param->rotation_state = VA_ROTATION_270;
         break;
     }
+#endif
 
     VA_SUCCESS_OR_RETURN(mapping.Unmap(), "Vpp Buffer unmapping", false);
   }
Index: dev/media/gpu/chromeos/fourcc.cc
===================================================================
--- dev.orig/media/gpu/chromeos/fourcc.cc
+++ dev/media/gpu/chromeos/fourcc.cc
@@ -214,11 +214,11 @@ uint32_t Fourcc::ToV4L2PixFmt() const {
 // static
 base::Optional<Fourcc> Fourcc::FromVAFourCC(uint32_t va_fourcc) {
   switch (va_fourcc) {
-    case VA_FOURCC_I420:
+    case VA_FOURCC('I', '4', '2', '0'):
       return Fourcc(YU12);
     case VA_FOURCC_NV12:
       return Fourcc(NV12);
-    case VA_FOURCC_NV21:
+    case VA_FOURCC('N', 'V', '2', '1'):
       return Fourcc(NV21);
     case VA_FOURCC_YV12:
       return Fourcc(YV12);
@@ -244,11 +244,11 @@ base::Optional<Fourcc> Fourcc::FromVAFou
 base::Optional<uint32_t> Fourcc::ToVAFourCC() const {
   switch (value_) {
     case YU12:
-      return VA_FOURCC_I420;
+      return VA_FOURCC('I', '4', '2', '0');
     case NV12:
       return VA_FOURCC_NV12;
     case NV21:
-      return VA_FOURCC_NV21;
+      return VA_FOURCC('N', 'V', '2', '1');
     case YV12:
       return VA_FOURCC_YV12;
     case YUYV:
Index: dev/ui/gfx/x/gen_xproto.py
===================================================================
--- dev.orig/ui/gfx/x/gen_xproto.py
+++ dev/ui/gfx/x/gen_xproto.py
@@ -376,7 +376,7 @@ class GenXproto(FileWriter):
             return 'Request'
         elif t.is_reply:
             return 'Reply'
-        elif t.is_event:
+        elif isinstance(t, self.xcbgen.xtypes.Event):
             return 'Event'
         return ''
 
@@ -574,7 +574,7 @@ class GenXproto(FileWriter):
                 copy_basic()
             else:
                 container_type, container_name = field.parent
-                assert container_type.is_event
+                assert isinstance(container_type, self.xcbgen.xtypes.Event)
                 opcode = container_type.opcodes[container_name]
                 self.write('%s %s = %s;' % (type_name, name, opcode))
                 self.copy_primitive(name)
@@ -595,7 +595,8 @@ class GenXproto(FileWriter):
             self.copy_primitive(name)
 
     def declare_case(self, case):
-        assert case.type.is_case != case.type.is_bitcase
+        if hasattr(case.type, 'is_case'):
+            assert case.type.is_case != case.type.is_bitcase
 
         fields = [
             field for case_field in case.type.fields
@@ -610,7 +611,10 @@ class GenXproto(FileWriter):
         return [(name + '_t', name)]
 
     def copy_case(self, case, switch_name):
-        op = 'CaseEq' if case.type.is_case else 'CaseAnd'
+        if hasattr(case.type, "is_case"):
+            op = 'CaseEq' if case.type.is_case else 'CaseAnd'
+        else:
+            op = 'CaseAnd'
         condition = ' || '.join([
             '%s(%s_expr, %s)' % (op, switch_name, self.expr(expr))
             for expr in case.type.expr
@@ -750,7 +754,7 @@ class GenXproto(FileWriter):
         elif t.is_container:
             with Indent(self, '{', '}'):
                 self.copy_container(t, name)
-        elif t.is_fd:
+        elif hasattr(t, 'is_fd') and t.is_fd:
             # TODO(https://crbug.com/1066670): Copy FDs out of band.
             self.write('NOTIMPLEMENTED();')
         else:
@@ -802,7 +806,7 @@ class GenXproto(FileWriter):
         name = struct_name[-1] + self.type_suffix(struct)
         self.undef(name)
         with Indent(self, 'struct %s {' % adjust_type_case(name), '};'):
-            if struct.is_event:
+            if isinstance(struct, self.xcbgen.xtypes.Event):
                 self.write('static constexpr uint8_t opcode = %s;' %
                            struct.opcodes[struct_name])
             for field in struct.fields:
@@ -1005,7 +1009,7 @@ class GenXproto(FileWriter):
                         and field_name in fields):
                     setattr(fields[field_name], for_type, field)
 
-            if field.type.is_switch or field.type.is_case_or_bitcase:
+            if field.type.is_switch or (field.type.is_case_or_bitcase if hasattr(field.type, 'is_case_or_bitcase') else field.type.is_bitcase):
                 self.resolve_type(field.type, field.field_type)
 
         if isinstance(t, self.xcbgen.xtypes.Request) and t.reply:
@@ -1097,6 +1101,11 @@ class GenXproto(FileWriter):
             self.write('#include "%s.h"' % direct_import[-1])
         self.write('#include "%s_undef.h"' % self.module.namespace.header)
         self.write()
+        self.write('#define X11_%s_MAJOR_VERSION %s' %
+                (self.class_name.upper(), self.module.namespace.major_version))
+        self.write('#define X11_%s_MINOR_VERSION %s' %
+                (self.class_name.upper(), self.module.namespace.minor_version))
+        self.write()
         self.write('namespace x11 {')
         self.write()
         self.write('class Connection;')
Index: dev/ui/gtk/gtk_util.cc
===================================================================
--- dev.orig/ui/gtk/gtk_util.cc
+++ dev/ui/gtk/gtk_util.cc
@@ -32,7 +32,9 @@
 #include "ui/ozone/public/ozone_platform.h"
 #include "ui/views/linux_ui/linux_ui.h"
 
+#if GTK_CHECK_VERSION(3, 20, 0)
 WEAK_GTK_FN(gtk_widget_path_iter_set_object_name);
+#endif
 WEAK_GTK_FN(gtk_widget_path_iter_set_state);
 
 namespace {
@@ -342,8 +344,10 @@ ScopedStyleContext AppendCssNodeToStyleC
           break;
         case CSS_OBJECT_NAME:
           if (GtkCheckVersion(3, 20)) {
+#if GTK_CHECK_VERSION(3, 20, 0)
             DCHECK(gtk_widget_path_iter_set_object_name);
             gtk_widget_path_iter_set_object_name(path, -1, t.token().c_str());
+#endif
           } else {
             gtk_widget_path_iter_add_class(path, -1, t.token().c_str());
           }
@@ -353,8 +357,10 @@ ScopedStyleContext AppendCssNodeToStyleC
           DCHECK(type);
           gtk_widget_path_append_type(path, type);
           if (GtkCheckVersion(3, 20) && t.token() == "GtkLabel") {
+#if GTK_CHECK_VERSION(3, 20, 0)
             DCHECK(gtk_widget_path_iter_set_object_name);
             gtk_widget_path_iter_set_object_name(path, -1, "label");
+#endif
           }
           break;
         }
Index: dev/ui/gfx/linux/drm_util_linux.cc
===================================================================
--- dev.orig/ui/gfx/linux/drm_util_linux.cc
+++ dev/ui/gfx/linux/drm_util_linux.cc
@@ -8,6 +8,15 @@
 
 #include "base/notreached.h"
 
+#ifndef DRM_FORMAT_INVALID
+// TODO(mcasas): Remove when uprevving //third_party/libdrm.
+#define DRM_FORMAT_INVALID 0
+#endif
+
+#ifndef DRM_FORMAT_P010
+#define DRM_FORMAT_P010 fourcc_code('P', '0', '1', '0')
+#endif
+
 namespace ui {
 
 int GetFourCCFormatFromBufferFormat(gfx::BufferFormat format) {
Index: dev/ui/base/x/x11_display_util.cc
===================================================================
--- dev.orig/ui/base/x/x11_display_util.cc
+++ dev/ui/base/x/x11_display_util.cc
@@ -34,6 +34,7 @@ std::map<x11::RandR::Output, int> GetMon
                                               x11::RandR* randr,
                                               x11::Window window) {
   std::map<x11::RandR::Output, int> output_to_monitor;
+#if X11_RANDR_MINOR_VERSION >= 5
   if (version >= 105) {
     if (auto reply = randr->GetMonitors({window}).Sync()) {
       for (size_t monitor = 0; monitor < reply->monitors.size(); monitor++) {
@@ -42,6 +43,7 @@ std::map<x11::RandR::Output, int> GetMon
       }
     }
   }
+#endif
   return output_to_monitor;
 }
 
