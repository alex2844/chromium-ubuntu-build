Index: dev/tools/gn/bootstrap/bootstrap.py
===================================================================
--- dev.orig/tools/gn/bootstrap/bootstrap.py
+++ dev/tools/gn/bootstrap/bootstrap.py
@@ -1,4 +1,4 @@
-#!/usr/bin/env python
+#!/usr/bin/env python3
 # Copyright 2014 The Chromium Authors. All rights reserved.
 # Use of this source code is governed by a BSD-style license that can be
 # found in the LICENSE file.
Index: dev/tools/generate_stubs/generate_stubs.py
===================================================================
--- dev.orig/tools/generate_stubs/generate_stubs.py
+++ dev/tools/generate_stubs/generate_stubs.py
@@ -1,4 +1,4 @@
-#!/usr/bin/env python
+#!/usr/bin/env python3
 # Copyright (c) 2012 The Chromium Authors. All rights reserved.
 # Use of this source code is governed by a BSD-style license that can be
 # found in the LICENSE file.
Index: dev/tools/gn/build/gen.py
===================================================================
--- dev.orig/tools/gn/build/gen.py
+++ dev/tools/gn/build/gen.py
@@ -1,4 +1,4 @@
-#!/usr/bin/env python
+#!/usr/bin/env python3
 # Copyright 2014 The Chromium Authors. All rights reserved.
 # Use of this source code is governed by a BSD-style license that can be
 # found in the LICENSE file.
Index: dev/tools/gn/src/gn/setup.cc
===================================================================
--- dev.orig/tools/gn/src/gn/setup.cc
+++ dev/tools/gn/src/gn/setup.cc
@@ -717,7 +717,7 @@ bool Setup::FillPythonPath(const base::C
     }
     build_settings_.set_python_path(python_path.NormalizePathSeparatorsTo('/'));
 #else
-    build_settings_.set_python_path(base::FilePath("python"));
+    build_settings_.set_python_path(base::FilePath("python2"));
 #endif
   }
   return true;
Index: dev/third_party/dom_distiller_js/protoc_plugins/json_values_converter.py
===================================================================
--- dev.orig/third_party/dom_distiller_js/protoc_plugins/json_values_converter.py
+++ dev/third_party/dom_distiller_js/protoc_plugins/json_values_converter.py
@@ -1,4 +1,4 @@
-#!/usr/bin/env python
+#!/usr/bin/env python2
 # Copyright 2016 The Chromium Authors. All rights reserved.
 # Use of this source code is governed by a BSD-style license that can be
 # found in the LICENSE file.
Index: dev/third_party/catapult/common/py_vulcanize/py_vulcanize/generate.py
===================================================================
--- dev.orig/third_party/catapult/common/py_vulcanize/py_vulcanize/generate.py
+++ dev/third_party/catapult/common/py_vulcanize/py_vulcanize/generate.py
@@ -83,7 +83,7 @@ def _MinifyJS(input_js):
 
   with tempfile.NamedTemporaryFile() as _:
     args = [
-        'python',
+        'python3',
         rjsmin_path
     ]
     p = subprocess.Popen(args,
@@ -203,7 +203,7 @@ def _MinifyCSS(css_text):
       os.path.join(py_vulcanize_path, 'third_party', 'rcssmin', 'rcssmin.py'))
 
   with tempfile.NamedTemporaryFile() as _:
-    rcssmin_args = ['python', rcssmin_path]
+    rcssmin_args = ['python3', rcssmin_path]
     p = subprocess.Popen(rcssmin_args,
                          stdin=subprocess.PIPE,
                          stdout=subprocess.PIPE,
Index: dev/ui/gfx/x/gen_xproto.py
===================================================================
--- dev.orig/ui/gfx/x/gen_xproto.py
+++ dev/ui/gfx/x/gen_xproto.py
@@ -173,6 +173,8 @@ import re
 import sys
 import types
 
+from functools import cmp_to_key
+
 # __main__.output must be defined before importing xcbgen,
 # so this global is unavoidable.
 output = collections.defaultdict(int)
@@ -990,7 +992,7 @@ class GenXproto(FileWriter):
 
         self.resolve_element(t.elt, fields)
 
-        for field in fields.values():
+        for field in list(fields.values()):
             if field.field_name == 'sequence':
                 field.visible = True
             field.parent = (t, name)
@@ -1063,7 +1065,8 @@ class GenXproto(FileWriter):
         # The order of types in xcbproto's xml files are inconsistent, so sort
         # them in the order {type aliases, enums, xidunions, structs,
         # requests/replies}.
-        def type_order_priority((name, item)):
+        def type_order_priority(tuple_type):
+            (name, item) = tuple_type
             if item.is_simple:
                 return 2 if self.get_xidunion_element(name) else 0
             if isinstance(item, self.xcbgen.xtypes.Enum):
@@ -1072,11 +1075,11 @@ class GenXproto(FileWriter):
                 return 4
             return 3
 
-        def cmp(type1, type2):
+        def cmp_func(type1, type2):
             return type_order_priority(type1) - type_order_priority(type2)
 
         # sort() is guaranteed to be stable.
-        self.module.all.sort(cmp=cmp)
+        self.module.all.sort(key=cmp_to_key(cmp_func))
 
     def gen_header(self):
         self.file = self.header_file
@@ -1301,8 +1304,14 @@ def main():
                             'dist-packages')
         sys.path.insert(1, path)
 
-    import xcbgen.xtypes
-    import xcbgen.state
+    try:
+        import xcbgen.xtypes
+        import xcbgen.state
+    except:
+        if sys.version_info < (3, 0):
+            import subprocess
+            subprocess.check_call(["python3"] + sys.argv)
+            return 0
 
     all_types = {}
     genprotos = [
