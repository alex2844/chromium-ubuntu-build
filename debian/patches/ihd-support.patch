Index: dev/media/gpu/vaapi/vaapi_video_decode_accelerator.cc
===================================================================
--- dev.orig/media/gpu/vaapi/vaapi_video_decode_accelerator.cc
+++ dev/media/gpu/vaapi/vaapi_video_decode_accelerator.cc
@@ -678,6 +678,7 @@ void VaapiVideoDecodeAccelerator::Assign
   // internal decoded frame.
   if (buffer_allocation_mode_ != BufferAllocationMode::kNone &&
       buffer_allocation_mode_ != BufferAllocationMode::kWrapVdpau &&
+      IsVppProfileSupported() &&
       !vpp_vaapi_wrapper_) {
     vpp_vaapi_wrapper_ = VaapiWrapper::Create(
         VaapiWrapper::kVideoProcess, VAProfileNone,
@@ -710,7 +711,8 @@ void VaapiVideoDecodeAccelerator::Assign
 
     std::unique_ptr<VaapiPicture> picture = vaapi_picture_factory_->Create(
         ((buffer_allocation_mode_ == BufferAllocationMode::kNone) ||
-         (buffer_allocation_mode_ == BufferAllocationMode::kWrapVdpau))
+         (buffer_allocation_mode_ == BufferAllocationMode::kWrapVdpau)) &&
+        IsVppProfileSupported()
             ? vaapi_wrapper_
             : vpp_vaapi_wrapper_,
         make_context_current_cb_, bind_image_cb_, buffer, size_to_bind);
@@ -1170,6 +1172,11 @@ VaapiVideoDecodeAccelerator::GetSupporte
   return profiles;
 }
 
+// static
+bool VaapiVideoDecodeAccelerator::IsVppProfileSupported() {
+  return VaapiWrapper::IsVppProfileSupported();
+}
+
 VaapiVideoDecodeAccelerator::BufferAllocationMode
 VaapiVideoDecodeAccelerator::DecideBufferAllocationMode() {
   // NVIDIA blobs use VDPAU
Index: dev/media/gpu/vaapi/vaapi_video_decode_accelerator.h
===================================================================
--- dev.orig/media/gpu/vaapi/vaapi_video_decode_accelerator.h
+++ dev/media/gpu/vaapi/vaapi_video_decode_accelerator.h
@@ -90,6 +90,8 @@ class MEDIA_GPU_EXPORT VaapiVideoDecodeA
 
   static VideoDecodeAccelerator::SupportedProfiles GetSupportedProfiles();
 
+  static bool IsVppProfileSupported();
+
   // DecodeSurfaceHandler implementation.
   scoped_refptr<VASurface> CreateSurface() override;
   void SurfaceReady(scoped_refptr<VASurface> va_surface,
Index: dev/media/gpu/vaapi/vaapi_wrapper.cc
===================================================================
--- dev.orig/media/gpu/vaapi/vaapi_wrapper.cc
+++ dev/media/gpu/vaapi/vaapi_wrapper.cc
@@ -1324,6 +1324,12 @@ bool VaapiWrapper::GetJpegDecodeSuitable
 }
 
 // static
+bool VaapiWrapper::IsVppProfileSupported() {
+  return VASupportedProfiles::Get().IsProfileSupported(kVideoProcess,
+                                                    VAProfileNone);
+}
+
+// static
 bool VaapiWrapper::IsVppResolutionAllowed(const gfx::Size& size) {
   const VASupportedProfiles::ProfileInfo* profile_info =
       VASupportedProfiles::Get().IsProfileSupported(kVideoProcess,
Index: dev/media/gpu/vaapi/vaapi_wrapper.h
===================================================================
--- dev.orig/media/gpu/vaapi/vaapi_wrapper.h
+++ dev/media/gpu/vaapi/vaapi_wrapper.h
@@ -183,6 +183,9 @@ class MEDIA_GPU_EXPORT VaapiWrapper
                                                uint32_t preferred_fourcc,
                                                uint32_t* suitable_fourcc);
 
+  // Checks to see if VAProfileNone is supported on this decoder
+  static bool IsVppProfileSupported();
+
   // Checks the surface size is allowed for VPP. Returns true if the size is
   // supported, false otherwise.
   static bool IsVppResolutionAllowed(const gfx::Size& size);
